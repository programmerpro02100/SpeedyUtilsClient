import os

# Set paths
base_dir = "app/components/tools"
output_file = os.path.join(base_dir, "toolComponentMap.ts")

# Tools that should be dynamically imported
dynamically_imported_tools = {"MarkdownToHtml", "PdfTextExtractor", "HtmlToPdf", "ExitDataViewer"}

# Storage for import lines and map entries
import_lines = ['import dynamic from "next/dynamic";\n']
map_entries = []

# Traverse the directory structure
for type_dir in os.listdir(base_dir):
    type_path = os.path.join(base_dir, type_dir)
    if not os.path.isdir(type_path):
        continue

    for tool_dir in os.listdir(type_path):
        tool_path = os.path.join(type_path, tool_dir)
        if not os.path.isdir(tool_path):
            continue

        import_name = tool_dir
        import_path = f"@/app/components/tools/{type_dir}/{tool_dir}/{tool_dir}"

        if tool_dir in dynamically_imported_tools:
            import_lines.append(
                f'const {import_name} = dynamic(() => import("{import_path}"), {{ ssr: false }});'
            )
        else:
            import_lines.append(f'import {import_name} from "{import_path}";')

        map_entries.append(f'  "{tool_dir}": {import_name},')

# Final content
output = "// Auto-generated by generate_tool_map.py\n"
output += "\n".join(import_lines) + "\n\n"
output += "const toolComponentMap: Record<string, React.ComponentType> = {\n"
output += "\n".join(map_entries) + "\n};\n\n"
output += "export default toolComponentMap;\n"

# Write to file
with open(output_file, "w", encoding="utf-8") as f:
    f.write(output)

print(f"Generated toolComponentMap.ts with {len(map_entries)} tools.")
